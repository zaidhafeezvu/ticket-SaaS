// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  tickets          Ticket[]
  purchases        Purchase[]
  sessions         Session[]
  accounts         Account[]
  reviewsGiven     Review[]  @relation("ReviewsGiven")
  reviewsReceived  Review[]  @relation("ReviewsReceived")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  expiresAt         DateTime?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, accountId])
  @@index([userId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([identifier, value])
}

model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  eventDate   DateTime
  location    String
  category    String
  quantity    Int
  available   Int
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  sellerId    String
  seller      User       @relation(fields: [sellerId], references: [id])
  purchases   Purchase[]
  
  @@index([sellerId])
  @@index([category])
  @@index([eventDate])
  @@index([available])
}

model Purchase {
  id          String   @id @default(cuid())
  quantity    Int
  totalPrice  Float
  status      String   @default("pending") // pending, completed, cancelled
  qrCode      String?  @unique // Unique QR code for ticket entry
  qrCodeScanned Boolean @default(false) // Whether QR code has been scanned
  qrCodeScannedAt DateTime? // When QR code was scanned
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  buyerId     String
  buyer       User     @relation(fields: [buyerId], references: [id])
  ticketId    String
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  review      Review?
  
  @@index([buyerId])
  @@index([ticketId])
  @@index([qrCode])
  @@index([status])
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  reviewerId  String
  reviewer    User     @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  revieweeId  String
  reviewee    User     @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade)
  purchaseId  String   @unique
  purchase    Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  
  @@index([reviewerId])
  @@index([revieweeId])
  @@index([purchaseId])
}
